        section .text
        global lin_comb

lin_comb:
        push rdi                       ; pointer to mat1
        push rsi                       ; scaler 1
        push rdx                       ; pointer to mat2
        push rcx                       ; scaler 2
        push r8                        ; pointer to mat3
        push r9                        ; number of rows/ columns of the matrix (n)
        push r11

; ; 0-indexing on all matrices
; ; mat1[j][i] = rdi+(r9*j+i)*8
; ; GOAL - Perform matrix linear combination of mat1, mat2 and save result in mat3
; ; Note : mat1, mat2 and mat3 here are not the same as one given in problem statement.
; ; They are just placeholders for any three matrices using this functionality.

; ; TODO - Fill your code here performing the matrix linear combination in the following order
; ; for(int i = 0; i < n; i++){for(int j = 0; j < n; j++){mat3[i][j] = s1*mat1[i][j] + s2*mat2[i][j];}}

        ; we define r15 as our outer loop iterator - i and set it to zero
        mov qword r15, 0x0             ; this is our variable i
        mov r10, r8                    ; address of mat3
        mov r11, rdi                   ; address of mat1
        mov r12, rdx                   ; address of mat2

outer:
        mov qword r14, 0x0                   ; sets our inner loop iterator to zero
inner:
        ; here we define the logic for mat3 updation

        mov qword r13, rsi             ; copies in the value of rsi - s1 into r13
        imul r13, [r11]                ; gets the value s1*mat1[i][j] in r13
        mov qword [r10], r13           ; starts generating the addition in r10

        mov qword r13, rcx             ; copies in the value of rcx - s2 into r13
        imul r13, [r12]                ; gets the value s2*mat2[i][j]
        add [r10], r13                 ; adds this value into the address of mat3

        ; now update inner loop variable that is j -> j+1 - r14
        add r14, 1

        ; update the addresses 
        add r10, 8
        add r11, 8
        add r12, 8

        cmp r14, r9                    ; if j < n then we continue the inner loop other wise we fall back into the outer loop
        jl inner

        ; now update the outer loop variable that is i -> i+1
        add r15, 1
        
        cmp r15, r9
        jl outer                       ; if i < n then we continue to loop otherwise obviously exit

; ; End of code to be filled
        pop r11
        pop r9
        pop r8
        pop rcx
        pop rdx
        pop rsi
        pop rdi
        ret


----------------------------------------------------------------

        section .text
        global hadarmard_prod

hadarmard_prod:
        push rdi                       ; pointer to mat1
        push rsi                       ; scaler 1
        push rdx                       ; pointer to mat2
        push rcx                       ; scaler 2
        push r8                        ; pointer to mat3
        push r9                        ; number of rows/ columns of the matrix (n)
        push r11


; ; 0-indexing on all matrices
; ; mat1[j][i] = rdi+(r9*j+i)*8
; ; GOAL - Compute hadarmard product of of mat1, mat2 and save the result in mat3
; ; Note : mat1, mat2 and mat3 here are not the same as one given in problem statement.
; ; They are just placeholders for any three matrices using this functionality.

; ; TODO - Fill your code here performing the hadarmard product in the following order
; ; for(int i = 0; i < n; i++){for(int j = 0; j < n; j++){mat3[i][j] = mat1[i][j] * mat2[i][j];}}
        ; we define r15 as our outer loop iterator - i and set it to zero
        mov qword r15, 0x0            
        mov r10, r8                    ; address of mat3
        mov r11, rdi                   ; address of mat1
        mov r12, rdx                   ; address of mat2

outer:
        mov qword r14, 0x0             ; sets our inner loop iterator to zero
inner:
        ; here we define the logic for mat3 updation

        mov qword r13, [r11]           ; copies in the value of mat1[i][j] into r13
        imul r13, [r12]                ; multiplies with the value mat2[i][j]
        mov qword [r10], r13           ; adds this value into the address of mat3

        ; now update inner loop variable that is j -> j+1 -- r14
        add r14, 1

        ; update the addresses 
        add r10, 8
        add r11, 8
        add r12, 8

        cmp r14, r9                    ; if j < n then we continue the inner loop other wise we fall back into the outer loop
        jl inner

        ; now update the outer loop variable that is i -> i+1
        add r15, 1
        
        cmp r15, r9
        jl outer                       ; if i < n then we continue to loop otherwise obviously exit

; ; End of code to be filled
        pop r11
        pop r9
        pop r8
        pop rcx
        pop rdx
        pop rsi
        pop rdi
        ret

----------------------------------------------------------------------------------------------------------

        section .text
        global  alt_sum

alt_sum:
        push rdi                       ; pointer to mat
        push rdx                       ; number of rows/ columns of the matrix (n)
        push r11

; ; 0-indexing on all matrices
; ; mat1[j][i] = rdi+(r9*j+i)*8
; ; GOAL - Perform matrix alternate summation of elements in matrix and return the sum

; ; TODO - Fill your code here performing the matrix alternate summation in the following order
; ; for(int i = 0; i < n; i++){for(int j = 0; j < n; j++){sum += (-1)^(i+j)*mat1[i][j];}}
         
        mov qword r15, 0x0             ; we define r15 as our outer loop iterator - i and set it to zero
        mov r11, rdi                   ; address of mat
        mov qword r10, 0x0

outer:
        mov qword r14, 0x0             ; sets our inner loop iterator to zero
inner:
        ; here we define the logic for mat3 updation
        mov qword r13, [r11]           ; copies in the value of mat[i][j] into r13

        mov qword r8, r14              ; moves in j
        add r8, r15                    ; adds i so we now have i+j
        and r8, 1                      ; take its 'and' with 1 so that we get the lsb which determines the value mod 2
        
        ; now we make an if case on where i+j is odd or even
        cmp r8, 1                      ; if r8 is odd, we will subtract
        je take_sub
        ; otherwise we add in the case it was it was even
        jmp take_add

take_sub:
        sub r10, r13           ; subtracts the value of mat[i][j]
        jmp next

take_add:
        add r10, r13           ; adds the value of mat[i][j]

next:
        
        ; now update inner loop variable that is j -> j+1 -- r14
        add r14, 1
        ; update the address
        add r11, 8


        cmp r14, rdx                    ; if j < n then we continue the inner loop other wise we fall back into the outer loop
        jl inner

        ; now update the outer loop variable that is i -> i+1
        add r15, 1
        
        cmp r15, rdx
        jl outer                       ; if i < n then we continue to loop otherwise obviously exit


; ; End of code to be filled
        pop r11
        pop rdx
        pop rdi
        ret
